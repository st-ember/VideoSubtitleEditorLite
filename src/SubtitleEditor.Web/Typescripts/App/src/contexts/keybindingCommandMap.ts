import SubtitleEditor from "SubtitleEditor";
import * as Command from "elements/Editor/commands/index";

export const keybindingCommandMap: {[key: string]: (editor: SubtitleEditor) => Promise<any>} = {
    FinishLine: (editor: SubtitleEditor) => Command.FinishLineCommand.invokeAsync(editor),
    EditLine: (editor: SubtitleEditor) => Command.EditLineCommand.invokeAsync(editor),
    PlayPeriod: (editor: SubtitleEditor) => Command.PlayPeriodCommand.invokeAsync(editor),
    Pause: (editor: SubtitleEditor) => Command.PauseMediaCommand.invokeAsync(editor),
    Play: (editor: SubtitleEditor) => Command.PlayMediaCommand.invokeAsync(editor),
    Split: (editor: SubtitleEditor) => Command.SplitLineCommand.invokeAsync(editor),
    Marge: (editor: SubtitleEditor) => Command.MargeLineCommand.invokeAsync(editor),
    MargePrev: (editor: SubtitleEditor) => Command.MargePrevLineCommand.invokeAsync(editor),
    MargeNext: (editor: SubtitleEditor) => Command.MargeNextLineCommand.invokeAsync(editor),
    EditPrev: (editor: SubtitleEditor) => Command.EditPrevLineCommand.invokeAsync(editor),
    EditNext: (editor: SubtitleEditor) => Command.EditNextLineCommand.invokeAsync(editor),
    SelectPrev: (editor: SubtitleEditor) => Command.SelectPrevLineCommand.invokeAsync(editor),
    SelectNext: (editor: SubtitleEditor) => Command.SelectNextLineCommand.invokeAsync(editor),
    AddSelectPrev: (editor: SubtitleEditor) => Command.AddSelectPrevLineCommand.invokeAsync(editor),
    AddSelectNext: (editor: SubtitleEditor) => Command.AddSelectNextLineCommand.invokeAsync(editor),
    InsertBefore: (editor: SubtitleEditor) => Command.InsertBeforeCommand.invokeAsync(editor),
    InsertAfter: (editor: SubtitleEditor) => Command.InsertAfterCommand.invokeAsync(editor),
    SelectAll: (editor: SubtitleEditor) => Command.SelectAllLinesCommand.invokeAsync(editor),
    Search: (editor: SubtitleEditor) => Command.SearchCommand.invokeAsync(editor),
    ShiftTime: (editor: SubtitleEditor) => Command.ShiftLinesCommand.invokeAsync(editor),
    RecoverToOriginal: (editor: SubtitleEditor) => Command.RecoverToOriginalCommand.invokeAsync(editor),
    Undo: (editor: SubtitleEditor) => Command.UndoCommand.invokeAsync(editor),
    Redo: (editor: SubtitleEditor) => Command.RedoCommand.invokeAsync(editor),
    Save: (editor: SubtitleEditor) => Command.SaveCommand.invokeAsync(editor),
    DeleteLine: (editor: SubtitleEditor) => Command.DeleteLinesCommand.invokeAsync(editor),
    QuickCreateLine: (editor: SubtitleEditor) => Command.QuickCreateLineCommand.invokeAsync(editor),
    PrevSecond: (editor: SubtitleEditor) => Command.PrevSecondCommand.invokeAsync(editor),
    NextSecond: (editor: SubtitleEditor) => Command.NextSecondCommand.invokeAsync(editor),
};

export const keybindingCheckCommandMap: {[key: string]: (editor: SubtitleEditor) => Promise<boolean>} = {
    FinishLine: (editor: SubtitleEditor) => Command.FinishLineCommand.checkAsync(editor),
    EditLine: (editor: SubtitleEditor) => Command.EditLineCommand.checkAsync(editor),
    PlayPeriod: (editor: SubtitleEditor) => Command.PlayPeriodCommand.checkAsync(editor),
    Pause: (editor: SubtitleEditor) => Command.PauseMediaCommand.checkAsync(editor),
    Play: (editor: SubtitleEditor) => Command.PlayMediaCommand.checkAsync(editor),
    Marge: (editor: SubtitleEditor) => Command.MargeLineCommand.checkAsync(editor),
    MargePrev: (editor: SubtitleEditor) => Command.MargePrevLineCommand.checkAsync(editor),
    MargeNext: (editor: SubtitleEditor) => Command.MargeNextLineCommand.checkAsync(editor),
    EditPrev: (editor: SubtitleEditor) => Command.EditPrevLineCommand.checkAsync(editor),
    EditNext: (editor: SubtitleEditor) => Command.EditNextLineCommand.checkAsync(editor),
    SelectPrev: (editor: SubtitleEditor) => Command.SelectPrevLineCommand.checkAsync(editor),
    SelectNext: (editor: SubtitleEditor) => Command.SelectNextLineCommand.checkAsync(editor),
    AddSelectPrev: (editor: SubtitleEditor) => Command.AddSelectPrevLineCommand.checkAsync(editor),
    AddSelectNext: (editor: SubtitleEditor) => Command.AddSelectNextLineCommand.checkAsync(editor),
    InsertBefore: (editor: SubtitleEditor) => Command.InsertBeforeCommand.checkAsync(editor),
    InsertAfter: (editor: SubtitleEditor) => Command.InsertAfterCommand.checkAsync(editor),
    DeleteLine: (editor: SubtitleEditor) => Command.DeleteLinesCommand.checkAsync(editor),
    QuickCreateLine: (editor: SubtitleEditor) => Command.QuickCreateLineCommand.checkAsync(editor),
};